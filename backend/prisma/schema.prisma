// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id    Int       @id @default(autoincrement())
  phone      String    @unique @db.VarChar(20)
  password   String    @db.VarChar(255)
  role       Role
  Customer   Customer?
  Dentist    Dentist?
  Clinic     Clinic?
  SystemAdmin SystemAdmin?

  // Relation fields
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
}

enum Role {
  CUSTOMER
  DENTIST
  CLINIC_OWNER
  SYSTEM_ADMIN
}

model Customer {
  customer_id         Int          @id @default(autoincrement())
  user_id             Int          @unique
  name                String       @db.VarChar(255)
  email               String       @db.VarChar(255)
  address             String       @db.VarChar(255)
  date_of_birth       DateTime    @db.Timestamp(6)
  appointments        Appointment[]
  periodic_treatments PeriodicTreatment[]
  User                User         @relation(fields: [user_id], references: [user_id])
}

model Dentist {
  dentist_id   Int          @id @default(autoincrement())
  user_id      Int          @unique
  name         String       @db.VarChar(255)
  email        String       @db.VarChar(255)
  specialization String     @db.VarChar(255)
  certificate  String[]     @db.VarChar(255)  // img url
  isApproved   Boolean      @default(false)
  appointments Appointment[]
  periodic_treatments PeriodicTreatment[]
  User         User         @relation(fields: [user_id], references: [user_id])

  clinics      Clinic[]
}

model Clinic {
  clinic_id      Int         @id @default(autoincrement())
  user_id        Int         @unique
  name           String      @db.VarChar(255)
  address        String      @db.VarChar(255)
  email          String      @db.VarChar(255)
  open_time      DateTime   @db.Time(6)
  close_time     DateTime   @db.Time(6)
  time_slot      Int         // duration in minutes
  image         String[]      @db.VarChar(255)
  max_patients_per_slot Int
  max_treatments_per_slot Int
  appointments   Appointment[]
  PeriodicTreatments PeriodicTreatment[] 
  User           User        @relation(fields: [user_id], references: [user_id])

  // Relation to Dentist
  dentists       Dentist[]

  latitude               Decimal       @db.Decimal
  longitude              Decimal       @db.Decimal
}



model Appointment {
  appointment_id Int          @id @default(autoincrement())
  customer_id    Int
  dentist_id     Int
  clinic_id      Int
  date           DateTime    @db.Timestamp(6)
  start_time     DateTime    @db.Time(6)
  end_time       DateTime    @db.Time(6)
  status         AppointmentStatus
  Customer       Customer     @relation(fields: [customer_id], references: [customer_id])
  Dentist        Dentist      @relation(fields: [dentist_id], references: [dentist_id])
  Clinic         Clinic       @relation(fields: [clinic_id], references: [clinic_id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model PeriodicTreatment {
  periodic_treatment_id Int      @id @default(autoincrement())
  customer_id           Int
  dentist_id            Int
  clinic_id             Int
  treatment_type        String   @db.VarChar(255)
  start_date            DateTime @db.Timestamp(6)
  end_date              DateTime @db.Timestamp(6)
  frequency             Int      // frequency in months
  Customer              Customer @relation(fields: [customer_id], references: [customer_id])
  Dentist               Dentist  @relation(fields: [dentist_id], references: [dentist_id])
  Clinic                Clinic   @relation(fields: [clinic_id], references: [clinic_id])
}

model Message {
  message_id    Int      @id @default(autoincrement())
  sender_id     Int
  receiver_id   Int
  content       String   @db.VarChar(255)
  sent_at       DateTime @default(now()) @db.Timestamp(6)
  Sender        User     @relation("MessageSender", fields: [sender_id], references: [user_id])
  Receiver      User     @relation("MessageReceiver", fields: [receiver_id], references: [user_id])
}

model SystemAdmin {
  admin_id   Int      @id @default(autoincrement())
  user_id    Int      @unique
  User       User     @relation(fields: [user_id], references: [user_id])
}